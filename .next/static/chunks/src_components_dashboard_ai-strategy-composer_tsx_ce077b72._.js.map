{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/src/components/dashboard/ai-strategy-composer.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Progress } from \"@/components/ui/progress\"\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\r\nimport {\r\n  Brain, Target, Calendar, Clock, Zap, TrendingUp, Users, DollarSign,\r\n  BarChart3, MessageSquare, Instagram, Facebook, Mail, Smartphone,\r\n  Package, Tag, Percent, Activity, History, Play, Pause, Settings,\r\n  Download, Share2, Bell, CheckCircle, AlertTriangle, Star, ArrowRight,\r\n  Plus, Edit, Trash, Eye, Copy, ExternalLink, ChevronRight, ChevronDown,\r\n  Lightbulb, Rocket, Shield, Crown, Heart, EyeOff, EyeOn, RefreshCw,\r\n  Save, Loader2, Sparkles, Target as TargetIcon, Calendar as CalendarIcon,\r\n  Users as UsersIcon, DollarSign as DollarSignIcon, BarChart3 as BarChart3Icon\r\n} from \"lucide-react\"\r\nimport {\r\n  LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid,\r\n  Tooltip, ResponsiveContainer, AreaChart, Area, PieChart, Pie, Cell\r\n} from \"recharts\"\r\n\r\n// Interfaces for data structures\r\ninterface StrategyGoal {\r\n  id: string\r\n  type: 'revenue' | 'orders' | 'engagement' | 'reach' | 'custom'\r\n  target: string\r\n  timeframe: number // days\r\n  urgency: 'low' | 'medium' | 'high'\r\n  budget?: number\r\n  constraints?: string[]\r\n  description: string\r\n  createdAt: string\r\n  status: 'draft' | 'active' | 'completed' | 'paused'\r\n}\r\n\r\ninterface StrategyAction {\r\n  id: string\r\n  type: 'drop' | 'ad' | 'content' | 'vip' | 'timing' | 'budget' | 'reminder'\r\n  title: string\r\n  description: string\r\n  day: number // which day in the strategy\r\n  priority: 'low' | 'medium' | 'high' | 'critical'\r\n  status: 'pending' | 'in-progress' | 'completed' | 'skipped'\r\n  estimatedImpact: number // percentage\r\n  budget?: number\r\n  platform?: string[]\r\n  targetAudience?: string\r\n  creativeType?: string\r\n  timing?: string\r\n  dependencies?: string[]\r\n  completionNotes?: string\r\n}\r\n\r\ninterface StrategyPlan {\r\n  id: string\r\n  goalId: string\r\n  title: string\r\n  description: string\r\n  duration: number // days\r\n  confidence: number // percentage\r\n  predictedOutcome: {\r\n    revenue?: number\r\n    orders?: number\r\n    engagement?: number\r\n    reach?: number\r\n  }\r\n  actions: StrategyAction[]\r\n  dataSources: string[]\r\n  reasoning: string[]\r\n  recommendations: string[]\r\n  riskFactors: string[]\r\n  createdAt: string\r\n  status: 'draft' | 'active' | 'completed' | 'paused'\r\n  lastUpdated: string\r\n}\r\n\r\ninterface StrategyMetrics {\r\n  totalStrategies: number\r\n  activeStrategies: number\r\n  completedStrategies: number\r\n  averageConfidence: number\r\n  averageSuccessRate: number\r\n  totalPredictedRevenue: number\r\n  totalActualRevenue: number\r\n  topPerformingActions: string[]\r\n}\r\n\r\nexport function AIStrategyComposer() {\r\n  const [goals, setGoals] = useState<StrategyGoal[]>([])\r\n  const [strategies, setStrategies] = useState<StrategyPlan[]>([])\r\n  const [metrics, setMetrics] = useState<StrategyMetrics | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [activeTab, setActiveTab] = useState<'composer' | 'strategies' | 'analytics'>('composer')\r\n  const [selectedStrategy, setSelectedStrategy] = useState<StrategyPlan | null>(null)\r\n  const [showGoalDialog, setShowGoalDialog] = useState(false)\r\n  const [newGoal, setNewGoal] = useState({\r\n    type: 'revenue' as const,\r\n    target: '',\r\n    timeframe: 7,\r\n    urgency: 'medium' as const,\r\n    budget: 0,\r\n    constraints: [] as string[],\r\n    description: ''\r\n  })\r\n\r\n  // Load data functions\r\n  const loadGoals = async () => {\r\n    try {\r\n      const response = await fetch('/api/ai-strategy-composer/goals')\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        setGoals(data)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading goals:', error)\r\n    }\r\n  }\r\n\r\n  const loadStrategies = async () => {\r\n    try {\r\n      const response = await fetch('/api/ai-strategy-composer/strategies')\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        setStrategies(data)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading strategies:', error)\r\n    }\r\n  }\r\n\r\n  const loadMetrics = async () => {\r\n    try {\r\n      const response = await fetch('/api/ai-strategy-composer/metrics')\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        setMetrics(data)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading metrics:', error)\r\n    }\r\n  }\r\n\r\n  // Generate strategy function\r\n  const generateStrategy = async (goal: StrategyGoal) => {\r\n    setIsLoading(true)\r\n    try {\r\n      const response = await fetch('/api/ai-strategy-composer/generate', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(goal)\r\n      })\r\n      if (response.ok) {\r\n        const strategy = await response.json()\r\n        setStrategies(prev => [strategy, ...prev])\r\n        setSelectedStrategy(strategy)\r\n        setActiveTab('strategies')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error generating strategy:', error)\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // Update action status\r\n  const updateActionStatus = async (strategyId: string, actionId: string, status: StrategyAction['status']) => {\r\n    try {\r\n      const response = await fetch(`/api/ai-strategy-composer/actions/${actionId}`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ status })\r\n      })\r\n      if (response.ok) {\r\n        setStrategies(prev => prev.map(strategy => {\r\n          if (strategy.id === strategyId) {\r\n            return {\r\n              ...strategy,\r\n              actions: strategy.actions.map(action =>\r\n                action.id === actionId ? { ...action, status } : action\r\n              )\r\n            }\r\n          }\r\n          return strategy\r\n        }))\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating action status:', error)\r\n    }\r\n  }\r\n\r\n  // Create new goal\r\n  const createGoal = async () => {\r\n    try {\r\n      const response = await fetch('/api/ai-strategy-composer/goals', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newGoal)\r\n      })\r\n      if (response.ok) {\r\n        const goal = await response.json()\r\n        setGoals(prev => [goal, ...prev])\r\n        setShowGoalDialog(false)\r\n        setNewGoal({\r\n          type: 'revenue',\r\n          target: '',\r\n          timeframe: 7,\r\n          urgency: 'medium',\r\n          budget: 0,\r\n          constraints: [],\r\n          description: ''\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating goal:', error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadGoals()\r\n    loadStrategies()\r\n    loadMetrics()\r\n  }, [])\r\n\r\n  const getPriorityColor = (priority: StrategyAction['priority']) => {\r\n    switch (priority) {\r\n      case 'critical': return 'bg-red-100 text-red-800 border-red-200'\r\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200'\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200'\r\n      case 'low': return 'bg-green-100 text-green-800 border-green-200'\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200'\r\n    }\r\n  }\r\n\r\n  const getStatusColor = (status: StrategyAction['status']) => {\r\n    switch (status) {\r\n      case 'completed': return 'bg-green-100 text-green-800 border-green-200'\r\n      case 'in-progress': return 'bg-blue-100 text-blue-800 border-blue-200'\r\n      case 'pending': return 'bg-gray-100 text-gray-800 border-gray-200'\r\n      case 'skipped': return 'bg-red-100 text-red-800 border-red-200'\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200'\r\n    }\r\n  }\r\n\r\n  const getUrgencyColor = (urgency: StrategyGoal['urgency']) => {\r\n    switch (urgency) {\r\n      case 'high': return 'bg-red-100 text-red-800 border-red-200'\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200'\r\n      case 'low': return 'bg-green-100 text-green-800 border-green-200'\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200'\r\n    }\r\n  }\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-EG', {\r\n      style: 'currency',\r\n      currency: 'EGP',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(amount)\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">AI Strategy Composer</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Your AI-powered business strategist. Input any goal and get a complete action plan.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            onClick={() => setShowGoalDialog(true)}\r\n            className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\r\n          >\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            New Goal\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"composer\" className=\"flex items-center space-x-2\">\r\n            <Brain className=\"w-4 h-4\" />\r\n            <span>Strategy Composer</span>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"strategies\" className=\"flex items-center space-x-2\">\r\n            <Target className=\"w-4 h-4\" />\r\n            <span>My Strategies</span>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\r\n            <BarChart3 className=\"w-4 h-4\" />\r\n            <span>Analytics</span>\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Strategy Composer Tab */}\r\n        <TabsContent value=\"composer\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n            {/* Smart Input */}\r\n            <Card className=\"lg:col-span-2\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Sparkles className=\"w-5 h-5 text-purple-600\" />\r\n                  <span>Smart Goal Input</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 p-4 rounded-lg border border-purple-200\">\r\n                  <div className=\"flex items-center space-x-2 mb-3\">\r\n                    <Brain className=\"w-5 h-5 text-purple-600\" />\r\n                    <h3 className=\"font-semibold text-purple-900\">AI Goal Understanding</h3>\r\n                  </div>\r\n                  <p className=\"text-sm text-purple-700 mb-4\">\r\n                    Tell me what you want to achieve. I&apos;ll analyze your goal and create a complete strategy.\r\n                  </p>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center space-x-2 text-sm text-purple-600\">\r\n                      <CheckCircle className=\"w-4 h-4\" />\r\n                      <span>Auto-detect timeframes and urgency</span>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2 text-sm text-purple-600\">\r\n                      <CheckCircle className=\"w-4 h-4\" />\r\n                      <span>Pull data from all connected modules</span>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2 text-sm text-purple-600\">\r\n                      <CheckCircle className=\"w-4 h-4\" />\r\n                      <span>Generate step-by-step action plan</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"goal-input\">What's your goal?</Label>\r\n                    <Textarea\r\n                      id=\"goal-input\"\r\n                      placeholder=\"e.g., I want to generate 300,000 EGP this month, I need to hit 1,000 orders in the next 21 days, I&apos;m launching a new hoodie — help me do it right...\"\r\n                      className=\"mt-1\"\r\n                      rows={4}\r\n                    />\r\n                  </div>\r\n                  <Button\r\n                    className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\r\n                    disabled={isLoading}\r\n                  >\r\n                    {isLoading ? (\r\n                      <>\r\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n                        Generating Strategy...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Brain className=\"w-4 h-4 mr-2\" />\r\n                        Generate Strategy\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Quick Stats */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Activity className=\"w-5 h-5 text-blue-600\" />\r\n                  <span>Quick Stats</span>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {metrics ? (\r\n                  <>\r\n                    <div className=\"space-y-3\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm text-gray-600\">Active Strategies</span>\r\n                        <Badge variant=\"secondary\">{metrics.activeStrategies}</Badge>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm text-gray-600\">Success Rate</span>\r\n                        <Badge variant=\"secondary\">{metrics.averageSuccessRate}%</Badge>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm text-gray-600\">Avg Confidence</span>\r\n                        <Badge variant=\"secondary\">{metrics.averageConfidence}%</Badge>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm text-gray-600\">Predicted Revenue</span>\r\n                        <span className=\"text-sm font-semibold text-green-600\">\r\n                          {formatCurrency(metrics.totalPredictedRevenue)}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <div className=\"text-center text-gray-500\">\r\n                    <Activity className=\"w-8 h-8 mx-auto mb-2 text-gray-400\" />\r\n                    <p className=\"text-sm\">Loading metrics...</p>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Recent Goals */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center space-x-2\">\r\n                <Target className=\"w-5 h-5 text-green-600\" />\r\n                <span>Recent Goals</span>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {goals.length > 0 ? (\r\n                <div className=\"space-y-3\">\r\n                  {goals.slice(0, 5).map((goal) => (\r\n                    <div key={goal.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          {goal.type === 'revenue' && <DollarSignIcon className=\"w-4 h-4 text-green-600\" />}\r\n                          {goal.type === 'orders' && <Package className=\"w-4 h-4 text-blue-600\" />}\r\n                          {goal.type === 'engagement' && <Heart className=\"w-4 h-4 text-red-600\" />}\r\n                          {goal.type === 'reach' && <UsersIcon className=\"w-4 h-4 text-purple-600\" />}\r\n                          {goal.type === 'custom' && <TargetIcon className=\"w-4 h-4 text-gray-600\" />}\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-900\">{goal.target}</p>\r\n                          <p className=\"text-sm text-gray-600\">{goal.description}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Badge className={getUrgencyColor(goal.urgency)}>\r\n                          {goal.urgency}\r\n                        </Badge>\r\n                        <Button\r\n                          size=\"sm\"\r\n                          onClick={() => generateStrategy(goal)}\r\n                          disabled={isLoading}\r\n                        >\r\n                          <Brain className=\"w-4 h-4 mr-1\" />\r\n                          Generate\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center text-gray-500 py-8\">\r\n                  <Target className=\"w-12 h-12 mx-auto mb-3 text-gray-400\" />\r\n                  <p>No goals created yet. Create your first goal to get started.</p>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* My Strategies Tab */}\r\n        <TabsContent value=\"strategies\" className=\"space-y-6\">\r\n          {strategies.length > 0 ? (\r\n            <div className=\"space-y-6\">\r\n              {strategies.map((strategy) => (\r\n                <Card key={strategy.id} className=\"border-2 border-gray-100 hover:border-purple-200 transition-colors\">\r\n                  <CardHeader>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <div className=\"p-2 bg-gradient-to-r from-purple-100 to-pink-100 rounded-lg\">\r\n                          <Brain className=\"w-5 h-5 text-purple-600\" />\r\n                        </div>\r\n                        <div>\r\n                          <CardTitle className=\"text-lg\">{strategy.title}</CardTitle>\r\n                          <p className=\"text-sm text-gray-600\">{strategy.description}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Badge variant=\"secondary\">{strategy.status}</Badge>\r\n                        <Badge className=\"bg-green-100 text-green-800 border-green-200\">\r\n                          {strategy.confidence}% confidence\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 mb-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <p className=\"text-sm font-medium text-gray-600\">Duration</p>\r\n                        <p className=\"text-lg font-semibold\">{strategy.duration} days</p>\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <p className=\"text-sm font-medium text-gray-600\">Actions</p>\r\n                        <p className=\"text-lg font-semibold\">{strategy.actions.length} steps</p>\r\n                      </div>\r\n                      <div className=\"space-y-2\">\r\n                        <p className=\"text-sm font-medium text-gray-600\">Predicted Revenue</p>\r\n                        <p className=\"text-lg font-semibold text-green-600\">\r\n                          {strategy.predictedOutcome.revenue ? formatCurrency(strategy.predictedOutcome.revenue) : 'N/A'}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Timeline View */}\r\n                    <div className=\"space-y-3\">\r\n                      <h4 className=\"font-medium text-gray-900\">Action Timeline</h4>\r\n                      <div className=\"space-y-2\">\r\n                        {strategy.actions\r\n                          .sort((a, b) => a.day - b.day)\r\n                          .map((action) => (\r\n                            <div key={action.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\r\n                              <div className=\"flex items-center space-x-2\">\r\n                                <Badge className={getPriorityColor(action.priority)}>\r\n                                  {action.priority}\r\n                                </Badge>\r\n                                <Badge className={getStatusColor(action.status)}>\r\n                                  {action.status}\r\n                                </Badge>\r\n                              </div>\r\n                              <div className=\"flex-1\">\r\n                                <p className=\"font-medium text-gray-900\">{action.title}</p>\r\n                                <p className=\"text-sm text-gray-600\">{action.description}</p>\r\n                                <p className=\"text-xs text-gray-500\">Day {action.day} • {action.estimatedImpact}% impact</p>\r\n                              </div>\r\n                              <div className=\"flex items-center space-x-1\">\r\n                                <Button\r\n                                  size=\"sm\"\r\n                                  variant=\"outline\"\r\n                                  onClick={() => updateActionStatus(strategy.id, action.id, 'completed')}\r\n                                  disabled={action.status === 'completed'}\r\n                                >\r\n                                  <CheckCircle className=\"w-3 h-3\" />\r\n                                </Button>\r\n                                <Button\r\n                                  size=\"sm\"\r\n                                  variant=\"outline\"\r\n                                  onClick={() => updateActionStatus(strategy.id, action.id, 'skipped')}\r\n                                  disabled={action.status === 'skipped'}\r\n                                >\r\n                                  <EyeOff className=\"w-3 h-3\" />\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                          ))}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* AI Reasoning */}\r\n                    <div className=\"mt-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-200\">\r\n                      <h4 className=\"font-medium text-blue-900 mb-2\">AI Reasoning</h4>\r\n                      <div className=\"space-y-2\">\r\n                        {strategy.reasoning.map((reason, index) => (\r\n                          <div key={index} className=\"flex items-start space-x-2\">\r\n                            <Lightbulb className=\"w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0\" />\r\n                            <p className=\"text-sm text-blue-800\">{reason}</p>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Recommendations */}\r\n                    <div className=\"mt-4 p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg border border-green-200\">\r\n                      <h4 className=\"font-medium text-green-900 mb-2\">Recommendations</h4>\r\n                      <div className=\"space-y-2\">\r\n                        {strategy.recommendations.map((rec, index) => (\r\n                          <div key={index} className=\"flex items-start space-x-2\">\r\n                            <Rocket className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\r\n                            <p className=\"text-sm text-green-800\">{rec}</p>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center text-gray-500 py-12\">\r\n              <Brain className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">No strategies yet</h3>\r\n              <p className=\"text-sm\">Create your first goal and generate a strategy to get started.</p>\r\n            </div>\r\n          )}\r\n        </TabsContent>\r\n\r\n        {/* Analytics Tab */}\r\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\r\n          {metrics ? (\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6\">\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Total Strategies</CardTitle>\r\n                  <Target className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{metrics.totalStrategies}</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    +{metrics.activeStrategies} active\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\r\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{metrics.averageSuccessRate}%</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Average across all strategies\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Avg Confidence</CardTitle>\r\n                  <Brain className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{metrics.averageConfidence}%</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    AI prediction accuracy\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Predicted Revenue</CardTitle>\r\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{formatCurrency(metrics.totalPredictedRevenue)}</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Total across all strategies\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center text-gray-500 py-12\">\r\n              <BarChart3 className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">Loading analytics...</h3>\r\n            </div>\r\n          )}\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Goal Creation Dialog */}\r\n      <Dialog open={showGoalDialog} onOpenChange={setShowGoalDialog}>\r\n        <DialogContent className=\"sm:max-w-[500px]\">\r\n          <DialogHeader>\r\n            <DialogTitle>Create New Goal</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"goal-type\">Goal Type</Label>\r\n              <Select\r\n                value={newGoal.type}\r\n                onValueChange={(value) => setNewGoal(prev => ({ ...prev, type: value as any }))}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"revenue\">Revenue Target</SelectItem>\r\n                  <SelectItem value=\"orders\">Order Count</SelectItem>\r\n                  <SelectItem value=\"engagement\">Engagement Rate</SelectItem>\r\n                  <SelectItem value=\"reach\">Audience Reach</SelectItem>\r\n                  <SelectItem value=\"custom\">Custom Goal</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"goal-target\">Target</Label>\r\n              <Input\r\n                id=\"goal-target\"\r\n                value={newGoal.target}\r\n                onChange={(e) => setNewGoal(prev => ({ ...prev, target: e.target.value }))}\r\n                placeholder=\"e.g., 300,000 EGP, 1,000 orders, 15% engagement\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"goal-timeframe\">Timeframe (days)</Label>\r\n                <Input\r\n                  id=\"goal-timeframe\"\r\n                  type=\"number\"\r\n                  value={newGoal.timeframe}\r\n                  onChange={(e) => setNewGoal(prev => ({ ...prev, timeframe: parseInt(e.target.value) }))}\r\n                  min=\"1\"\r\n                  max=\"90\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"goal-urgency\">Urgency</Label>\r\n                <Select\r\n                  value={newGoal.urgency}\r\n                  onValueChange={(value) => setNewGoal(prev => ({ ...prev, urgency: value as any }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"low\">Low</SelectItem>\r\n                    <SelectItem value=\"medium\">Medium</SelectItem>\r\n                    <SelectItem value=\"high\">High</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"goal-budget\">Budget (optional)</Label>\r\n              <Input\r\n                id=\"goal-budget\"\r\n                type=\"number\"\r\n                value={newGoal.budget}\r\n                onChange={(e) => setNewGoal(prev => ({ ...prev, budget: parseInt(e.target.value) || 0 }))}\r\n                placeholder=\"Enter budget amount\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"goal-description\">Description</Label>\r\n              <Textarea\r\n                id=\"goal-description\"\r\n                value={newGoal.description}\r\n                onChange={(e) => setNewGoal(prev => ({ ...prev, description: e.target.value }))}\r\n                placeholder=\"Describe your goal in detail...\"\r\n                rows={3}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex justify-end space-x-2\">\r\n              <Button variant=\"outline\" onClick={() => setShowGoalDialog(false)}>\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={createGoal}>\r\n                Create Goal\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}