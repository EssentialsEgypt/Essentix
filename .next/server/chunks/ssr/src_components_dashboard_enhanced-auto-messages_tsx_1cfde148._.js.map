{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/src/components/dashboard/enhanced-auto-messages.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Switch } from \"@/components/ui/switch\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\r\nimport { toast } from \"sonner\"\r\nimport ErrorBoundary from \"@/components/ui/error-boundary\"\r\nimport { Calendar, Clock, BarChart3, MessageSquare, Sparkles, Settings, History, Copy, Eye } from \"lucide-react\"\r\n\r\ninterface AutoMessage {\r\n  id: number\r\n  trigger: string\r\n  message: string\r\n  active: boolean\r\n  slackEnabled: boolean\r\n  whatsappEnabled: boolean\r\n  emailEnabled: boolean\r\n  schedule?: {\r\n    enabled: boolean\r\n    time: string\r\n    timezone: string\r\n    days: string[]\r\n  }\r\n  analytics?: {\r\n    sentCount: number\r\n    openRate: number\r\n    clickRate: number\r\n    lastSent: string\r\n  }\r\n  template?: string\r\n  variables?: string[]\r\n}\r\n\r\n// Message templates for different scenarios\r\nconst messageTemplates = [\r\n  {\r\n    name: \"High CPR Alert\",\r\n    template: \"üö® High CPR Alert: Campaign {campaign_name} has CPR of {cpr_value} which is {percentage}% above target. Consider pausing or optimizing.\",\r\n    variables: [\"campaign_name\", \"cpr_value\", \"percentage\"]\r\n  },\r\n  {\r\n    name: \"Revenue Milestone\",\r\n    template: \"üéâ Revenue Milestone: {platform} campaign reached {revenue_amount} in revenue! Great performance!\",\r\n    variables: [\"platform\", \"revenue_amount\"]\r\n  },\r\n  {\r\n    name: \"Low Performance\",\r\n    template: \"‚ö†Ô∏è Performance Alert: {campaign_name} is underperforming with {metric} of {value}. Consider reviewing strategy.\",\r\n    variables: [\"campaign_name\", \"metric\", \"value\"]\r\n  },\r\n  {\r\n    name: \"Budget Alert\",\r\n    template: \"üí∞ Budget Alert: {campaign_name} has spent {spent_amount} of {budget_amount} ({percentage}%).\",\r\n    variables: [\"campaign_name\", \"spent_amount\", \"budget_amount\", \"percentage\"]\r\n  }\r\n]\r\n\r\n// AI suggested messages based on performance data\r\nconst aiSuggestions = [\r\n  \"Consider increasing budget for high-performing campaigns\",\r\n  \"Review targeting for campaigns with low conversion rates\",\r\n  \"Test new creative assets for underperforming ads\",\r\n  \"Optimize bidding strategy for better ROAS\"\r\n]\r\n\r\nexport function EnhancedAutoMessages() {\r\n  const [autoMessages, setAutoMessages] = useState<AutoMessage[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [editingId, setEditingId] = useState<number | null>(null)\r\n  const [editedMessage, setEditedMessage] = useState<string>(\"\")\r\n  const [updatingId, setUpdatingId] = useState<number | null>(null)\r\n  const [showTemplates, setShowTemplates] = useState(false)\r\n  const [selectedTemplate, setSelectedTemplate] = useState<string>(\"\")\r\n  const [showAnalytics, setShowAnalytics] = useState<number | null>(null)\r\n  const [showSchedule, setShowSchedule] = useState<number | null>(null)\r\n  const [newMessage, setNewMessage] = useState({\r\n    trigger: \"\",\r\n    message: \"\",\r\n    template: \"\"\r\n  })\r\n\r\n  useEffect(() => {\r\n    async function fetchAutoMessages() {\r\n      try {\r\n        setLoading(true)\r\n        setError(null)\r\n        const res = await fetch('/api/auto-messages')\r\n        if (!res.ok) throw new Error('Failed to fetch auto messages')\r\n        const data = await res.json()\r\n        // Add mock analytics data for demonstration\r\n        const messagesWithAnalytics = data.messages.map((msg: AutoMessage) => ({\r\n          ...msg,\r\n          analytics: {\r\n            sentCount: Math.floor(Math.random() * 100) + 10,\r\n            openRate: Math.random() * 0.3 + 0.1,\r\n            clickRate: Math.random() * 0.1 + 0.02,\r\n            lastSent: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString()\r\n          }\r\n        }))\r\n        setAutoMessages(messagesWithAnalytics)\r\n      } catch (err: unknown) {\r\n        const errorMessage = err instanceof Error ? err.message : 'Error loading auto messages'\r\n        setError(errorMessage)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n    fetchAutoMessages()\r\n  }, [])\r\n\r\n  function startEditing(id: number, currentMessage: string) {\r\n    setEditingId(id)\r\n    setEditedMessage(currentMessage)\r\n  }\r\n\r\n  function cancelEditing() {\r\n    setEditingId(null)\r\n    setEditedMessage(\"\")\r\n  }\r\n\r\n  async function saveEditedMessage(id: number) {\r\n    try {\r\n      setUpdatingId(id)\r\n      const res = await fetch(`/api/auto-messages/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: editedMessage }),\r\n      })\r\n      if (!res.ok) throw new Error('Failed to update message')\r\n      setAutoMessages((prev) =>\r\n        prev.map((msg) => (msg.id === id ? { ...msg, message: editedMessage } : msg))\r\n      )\r\n      toast.success('Message updated successfully')\r\n      cancelEditing()\r\n    } catch (err: any) {\r\n      toast.error(err.message || 'Error updating message')\r\n    } finally {\r\n      setUpdatingId(null)\r\n    }\r\n  }\r\n\r\n  async function toggleChannel(id: number, channel: 'slack' | 'whatsapp' | 'email', enabled: boolean) {\r\n    try {\r\n      setUpdatingId(id)\r\n      const res = await fetch(`/api/auto-messages/${id}/channels`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ channel, enabled }),\r\n      })\r\n      if (!res.ok) throw new Error('Failed to update channel status')\r\n      setAutoMessages((prev) =>\r\n        prev.map((msg) =>\r\n          msg.id === id\r\n            ? {\r\n              ...msg,\r\n              slackEnabled: channel === 'slack' ? enabled : msg.slackEnabled,\r\n              whatsappEnabled: channel === 'whatsapp' ? enabled : msg.whatsappEnabled,\r\n              emailEnabled: channel === 'email' ? enabled : msg.emailEnabled,\r\n            }\r\n            : msg\r\n        )\r\n      )\r\n      toast.success(`Updated ${channel} alert for \"${autoMessages.find(m => m.id === id)?.trigger}\"`)\r\n    } catch (err: any) {\r\n      toast.error(err.message || 'Error updating channel')\r\n    } finally {\r\n      setUpdatingId(null)\r\n    }\r\n  }\r\n\r\n  async function handleTestAlert(id: number, channel: 'slack' | 'whatsapp' | 'email') {\r\n    try {\r\n      const msg = autoMessages.find(m => m.id === id)\r\n      if (!msg) throw new Error('Message not found')\r\n      const res = await fetch(`/api/integrations/${channel}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          channel: channel === 'slack' ? '#ad-performance' : undefined,\r\n          toNumber: channel === 'whatsapp' ? '+1234567890' : undefined,\r\n          toEmails: channel === 'email' ? ['cmo@example.com'] : undefined,\r\n          text: msg.message,\r\n          subject: channel === 'email' ? `Test Alert: ${msg.trigger}` : undefined,\r\n          htmlContent: channel === 'email' ? `<p>${msg.message}</p>` : undefined,\r\n        }),\r\n      })\r\n      const data = await res.json()\r\n      if (!res.ok || data.error) throw new Error(data.error || 'Failed to send test alert')\r\n      toast.success(`Test alert sent via ${channel} for \"${msg.trigger}\"`)\r\n    } catch (err: any) {\r\n      toast.error(err.message || 'Error sending test alert')\r\n    }\r\n  }\r\n\r\n  function applyTemplate(template: string) {\r\n    setEditedMessage(template)\r\n    setShowTemplates(false)\r\n  }\r\n\r\n  function copyToClipboard(text: string) {\r\n    navigator.clipboard.writeText(text)\r\n    toast.success('Message copied to clipboard')\r\n  }\r\n\r\n  function previewMessage(message: string) {\r\n    // Replace variables with sample values for preview\r\n    const preview = message\r\n      .replace(/{campaign_name}/g, 'Sample Campaign')\r\n      .replace(/{cpr_value}/g, '25 EGP')\r\n      .replace(/{percentage}/g, '15%')\r\n      .replace(/{platform}/g, 'Facebook')\r\n      .replace(/{revenue_amount}/g, '$5,000')\r\n      .replace(/{metric}/g, 'CTR')\r\n      .replace(/{value}/g, '1.2%')\r\n      .replace(/{spent_amount}/g, '$2,500')\r\n      .replace(/{budget_amount}/g, '$3,000')\r\n    return preview\r\n  }\r\n\r\n  if (loading) return <p className=\"p-4 text-center\">Loading auto messages...</p>\r\n  if (error) return <p className=\"p-4 text-center text-red-600\">Error: {error}</p>\r\n\r\n  return (\r\n    <ErrorBoundary fallback={<p className=\"p-4 text-center text-red-600\">Something went wrong.</p>}>\r\n      <div className=\"space-y-6\">\r\n        {/* Header with Add New Message */}\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <MessageSquare className=\"h-5 w-5\" />\r\n                  Auto Messages\r\n                </CardTitle>\r\n                <CardDescription>Manage automated messages and triggers</CardDescription>\r\n              </div>\r\n              <Dialog>\r\n                <DialogTrigger asChild>\r\n                  <Button>\r\n                    <MessageSquare className=\"h-4 w-4 mr-2\" />\r\n                    Add New Message\r\n                  </Button>\r\n                </DialogTrigger>\r\n                <DialogContent className=\"max-w-2xl\">\r\n                  <DialogHeader>\r\n                    <DialogTitle>Create New Auto Message</DialogTitle>\r\n                  </DialogHeader>\r\n                  <Tabs defaultValue=\"manual\" className=\"w-full\">\r\n                    <TabsList className=\"grid w-full grid-cols-3\">\r\n                      <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n                      <TabsTrigger value=\"template\">Template</TabsTrigger>\r\n                      <TabsTrigger value=\"ai\">AI Suggested</TabsTrigger>\r\n                    </TabsList>\r\n                    <TabsContent value=\"manual\" className=\"space-y-4\">\r\n                      <div>\r\n                        <label className=\"text-sm font-medium\">Trigger</label>\r\n                        <Input\r\n                          placeholder=\"e.g., High CPR Alert\"\r\n                          value={newMessage.trigger}\r\n                          onChange={(e) => setNewMessage({ ...newMessage, trigger: e.target.value })}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <label className=\"text-sm font-medium\">Message</label>\r\n                        <Textarea\r\n                          placeholder=\"Enter your message...\"\r\n                          value={newMessage.message}\r\n                          onChange={(e) => setNewMessage({ ...newMessage, message: e.target.value })}\r\n                          rows={4}\r\n                        />\r\n                      </div>\r\n                    </TabsContent>\r\n                    <TabsContent value=\"template\" className=\"space-y-4\">\r\n                      <div>\r\n                        <label className=\"text-sm font-medium\">Select Template</label>\r\n                        <Select onValueChange={(value) => {\r\n                          const template = messageTemplates.find(t => t.name === value)\r\n                          if (template) {\r\n                            setNewMessage({\r\n                              ...newMessage,\r\n                              trigger: value,\r\n                              message: template.template\r\n                            })\r\n                          }\r\n                        }}>\r\n                          <SelectTrigger>\r\n                            <SelectValue placeholder=\"Choose a template\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {messageTemplates.map((template) => (\r\n                              <SelectItem key={template.name} value={template.name}>\r\n                                {template.name}\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                      {newMessage.message && (\r\n                        <div>\r\n                          <label className=\"text-sm font-medium\">Preview</label>\r\n                          <div className=\"p-3 bg-gray-50 rounded border\">\r\n                            <p className=\"text-sm\">{previewMessage(newMessage.message)}</p>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </TabsContent>\r\n                    <TabsContent value=\"ai\" className=\"space-y-4\">\r\n                      <div className=\"space-y-2\">\r\n                        <label className=\"text-sm font-medium\">AI Suggestions</label>\r\n                        {aiSuggestions.map((suggestion, index) => (\r\n                          <div key={index} className=\"p-3 bg-blue-50 rounded border\">\r\n                            <p className=\"text-sm\">{suggestion}</p>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              className=\"mt-2\"\r\n                              onClick={() => setNewMessage({\r\n                                ...newMessage,\r\n                                trigger: `AI Suggestion ${index + 1}`,\r\n                                message: suggestion\r\n                              })}\r\n                            >\r\n                              Use This\r\n                            </Button>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </TabsContent>\r\n                  </Tabs>\r\n                  <div className=\"flex justify-end gap-2\">\r\n                    <Button variant=\"outline\">Cancel</Button>\r\n                    <Button>Create Message</Button>\r\n                  </div>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </CardHeader>\r\n        </Card>\r\n\r\n        {/* Main Messages Table */}\r\n        <Card>\r\n          <CardContent className=\"p-0\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Trigger</TableHead>\r\n                  <TableHead>Message</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Channels</TableHead>\r\n                  <TableHead>Analytics</TableHead>\r\n                  <TableHead>Schedule</TableHead>\r\n                  <TableHead>Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {autoMessages.map((msg) => (\r\n                  <TableRow key={msg.id}>\r\n                    <TableCell>\r\n                      <div className=\"font-medium\">{msg.trigger}</div>\r\n                      {msg.template && (\r\n                        <Badge variant=\"secondary\" className=\"text-xs\">Template</Badge>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"max-w-xs\">\r\n                        {editingId === msg.id ? (\r\n                          <div className=\"space-y-2\">\r\n                            <Textarea\r\n                              value={editedMessage}\r\n                              onChange={(e) => setEditedMessage(e.target.value)}\r\n                              disabled={updatingId === msg.id}\r\n                              rows={3}\r\n                              className=\"text-sm\"\r\n                            />\r\n                            <div className=\"flex gap-2\">\r\n                              <Button\r\n                                size=\"sm\"\r\n                                variant=\"outline\"\r\n                                onClick={() => setShowTemplates(true)}\r\n                              >\r\n                                <Sparkles className=\"h-3 w-3 mr-1\" />\r\n                                Templates\r\n                              </Button>\r\n                              <Button\r\n                                size=\"sm\"\r\n                                variant=\"outline\"\r\n                                onClick={() => copyToClipboard(editedMessage)}\r\n                              >\r\n                                <Copy className=\"h-3 w-3 mr-1\" />\r\n                                Copy\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"space-y-2\">\r\n                            <p className=\"text-sm line-clamp-2\">{msg.message}</p>\r\n                            <div className=\"flex gap-1\">\r\n                              <Button\r\n                                size=\"sm\"\r\n                                variant=\"ghost\"\r\n                                onClick={() => copyToClipboard(msg.message)}\r\n                              >\r\n                                <Copy className=\"h-3 w-3\" />\r\n                              </Button>\r\n                              <Button\r\n                                size=\"sm\"\r\n                                variant=\"ghost\"\r\n                                onClick={() => alert(previewMessage(msg.message))}\r\n                              >\r\n                                <Eye className=\"h-3 w-3\" />\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={msg.active ? \"secondary\" : \"outline\"}>\r\n                        {msg.active ? \"Active\" : \"Inactive\"}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-1\">\r\n                        <Switch\r\n                          checked={msg.slackEnabled}\r\n                          disabled={updatingId === msg.id}\r\n                          onCheckedChange={(checked) => toggleChannel(msg.id, 'slack', checked)}\r\n                          aria-label={`Toggle Slack alert for ${msg.trigger}`}\r\n                        />\r\n                        <Switch\r\n                          checked={msg.whatsappEnabled}\r\n                          disabled={updatingId === msg.id}\r\n                          onCheckedChange={(checked) => toggleChannel(msg.id, 'whatsapp', checked)}\r\n                          aria-label={`Toggle WhatsApp alert for ${msg.trigger}`}\r\n                        />\r\n                        <Switch\r\n                          checked={msg.emailEnabled}\r\n                          disabled={updatingId === msg.id}\r\n                          onCheckedChange={(checked) => toggleChannel(msg.id, 'email', checked)}\r\n                          aria-label={`Toggle Email alert for ${msg.trigger}`}\r\n                        />\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {msg.analytics && (\r\n                        <Dialog>\r\n                          <DialogTrigger asChild>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              onClick={() => setShowAnalytics(msg.id)}\r\n                            >\r\n                              <BarChart3 className=\"h-4 w-4 mr-1\" />\r\n                              View\r\n                            </Button>\r\n                          </DialogTrigger>\r\n                          <DialogContent>\r\n                            <DialogHeader>\r\n                              <DialogTitle>Analytics for {msg.trigger}</DialogTitle>\r\n                            </DialogHeader>\r\n                            <div className=\"space-y-4\">\r\n                              <div className=\"grid grid-cols-2 gap-4\">\r\n                                <div className=\"text-center p-3 bg-blue-50 rounded\">\r\n                                  <div className=\"text-2xl font-bold\">{msg.analytics.sentCount}</div>\r\n                                  <div className=\"text-sm text-gray-600\">Messages Sent</div>\r\n                                </div>\r\n                                <div className=\"text-center p-3 bg-green-50 rounded\">\r\n                                  <div className=\"text-2xl font-bold\">{(msg.analytics.openRate * 100).toFixed(1)}%</div>\r\n                                  <div className=\"text-sm text-gray-600\">Open Rate</div>\r\n                                </div>\r\n                                <div className=\"text-center p-3 bg-purple-50 rounded\">\r\n                                  <div className=\"text-2xl font-bold\">{(msg.analytics.clickRate * 100).toFixed(1)}%</div>\r\n                                  <div className=\"text-sm text-gray-600\">Click Rate</div>\r\n                                </div>\r\n                                <div className=\"text-center p-3 bg-orange-50 rounded\">\r\n                                  <div className=\"text-sm text-gray-600\">Last Sent</div>\r\n                                  <div className=\"text-sm font-medium\">\r\n                                    {new Date(msg.analytics.lastSent).toLocaleDateString()}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </DialogContent>\r\n                        </Dialog>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => setShowSchedule(msg.id)}\r\n                      >\r\n                        <Clock className=\"h-4 w-4 mr-1\" />\r\n                        Schedule\r\n                      </Button>\r\n                    </TableCell>\r\n                    <TableCell className=\"space-x-2\">\r\n                      {editingId === msg.id ? (\r\n                        <>\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"outline\"\r\n                            disabled={updatingId === msg.id}\r\n                            onClick={() => saveEditedMessage(msg.id)}\r\n                          >\r\n                            Save\r\n                          </Button>\r\n                          <Button size=\"sm\" variant=\"ghost\" onClick={cancelEditing}>\r\n                            Cancel\r\n                          </Button>\r\n                        </>\r\n                      ) : (\r\n                        <div className=\"flex flex-wrap gap-1\">\r\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => startEditing(msg.id, msg.message)}>\r\n                            Edit\r\n                          </Button>\r\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => handleTestAlert(msg.id, 'slack')}>\r\n                            Test Slack\r\n                          </Button>\r\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => handleTestAlert(msg.id, 'whatsapp')}>\r\n                            Test WhatsApp\r\n                          </Button>\r\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => handleTestAlert(msg.id, 'email')}>\r\n                            Test Email\r\n                          </Button>\r\n                        </div>\r\n                      )}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Templates Dialog */}\r\n        {showTemplates && (\r\n          <Dialog open={showTemplates} onOpenChange={setShowTemplates}>\r\n            <DialogContent>\r\n              <DialogHeader>\r\n                <DialogTitle>Message Templates</DialogTitle>\r\n              </DialogHeader>\r\n              <div className=\"space-y-4\">\r\n                {messageTemplates.map((template) => (\r\n                  <div key={template.name} className=\"p-3 border rounded\">\r\n                    <h4 className=\"font-medium mb-2\">{template.name}</h4>\r\n                    <p className=\"text-sm text-gray-600 mb-2\">{template.template}</p>\r\n                    <div className=\"flex gap-2\">\r\n                      <Button\r\n                        size=\"sm\"\r\n                        onClick={() => applyTemplate(template.template)}\r\n                      >\r\n                        Use Template\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => copyToClipboard(template.template)}\r\n                      >\r\n                        Copy\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n      </div>\r\n    </ErrorBoundary>\r\n  )\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}