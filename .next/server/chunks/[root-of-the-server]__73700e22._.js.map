{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/src/services/ai-auto-replies.ts"],"sourcesContent":["// AutoReply-AI-Start: AI-Powered Auto Replies Engine Service\r\n// Handles real-time message processing, intent detection, and response generation\r\n\r\nexport interface MessageIntent {\r\n    type: 'question' | 'complaint' | 'hype' | 'confusion' | 'request' | 'order_tracking' | 'product_info' | 'support' | 'drop_inquiry' | 'general'\r\n    confidence: number\r\n    urgency: 'low' | 'medium' | 'high' | 'critical'\r\n    emotionalTone: 'positive' | 'negative' | 'neutral' | 'excited' | 'frustrated'\r\n    requiresHumanEscalation: boolean\r\n    suggestedResponse: string\r\n    tags: string[]\r\n}\r\n\r\nexport interface SenderContext {\r\n    id: string\r\n    platform: 'instagram' | 'whatsapp' | 'email' | 'live_chat'\r\n    isVIP: boolean\r\n    isFirstTime: boolean\r\n    hasOrderedRecently: boolean\r\n    hasCommentedBefore: boolean\r\n    lastInteractionDate: Date\r\n    totalInteractions: number\r\n    averageResponseTime: number\r\n    preferredLanguage: string\r\n    timezone: string\r\n    customerSegment: 'cold' | 'warm' | 'hot' | 'vip'\r\n}\r\n\r\nexport interface AutoReplyTemplate {\r\n    id: string\r\n    name: string\r\n    category: string\r\n    intent: string[]\r\n    platforms: string[]\r\n    template: string\r\n    variables: string[]\r\n    tone: string\r\n    isActive: boolean\r\n    usageCount: number\r\n    successRate: number\r\n    lastUsed: Date\r\n}\r\n\r\nexport interface AutoReplyResponse {\r\n    id: string\r\n    originalMessageId: string\r\n    senderId: string\r\n    platform: string\r\n    intent: MessageIntent\r\n    response: string\r\n    templateUsed?: string\r\n    wasEdited: boolean\r\n    wasApproved: boolean\r\n    responseTime: number\r\n    sentAt: Date\r\n    tags: string[]\r\n    escalationTriggered: boolean\r\n}\r\n\r\nexport interface PlatformConfig {\r\n    platform: string\r\n    apiKey: string\r\n    webhookUrl?: string\r\n    responseDelay: number\r\n    typingIndicator: boolean\r\n    maxResponseLength: number\r\n    supportedFeatures: string[]\r\n}\r\n\r\nexport interface AutoReplyAnalytics {\r\n    totalResponses: number\r\n    averageResponseTime: number\r\n    successRate: number\r\n    escalationRate: number\r\n    platformBreakdown: Record<string, number>\r\n    intentBreakdown: Record<string, number>\r\n    topTemplates: AutoReplyTemplate[]\r\n    recentResponses: AutoReplyResponse[]\r\n}\r\n\r\nclass AIAutoRepliesService {\r\n    private templates: AutoReplyTemplate[] = []\r\n    private platformConfigs: PlatformConfig[] = []\r\n    private isActive: boolean = true\r\n\r\n    // AutoReply-AI-Start: Initialize the auto reply system\r\n    constructor() {\r\n        this.loadDefaultTemplates()\r\n        this.loadPlatformConfigs()\r\n    }\r\n\r\n    // AutoReply-AI-Start: Load default response templates\r\n    private loadDefaultTemplates() {\r\n        this.templates = [\r\n            {\r\n                id: 'faq-shipping',\r\n                name: 'Shipping Information',\r\n                category: 'FAQ',\r\n                intent: ['question', 'request'],\r\n                platforms: ['instagram', 'whatsapp', 'email'],\r\n                template: 'Hi {name}! Shipping takes 2-3 business days within Egypt. International shipping available. Track your order at {tracking_link}',\r\n                variables: ['name', 'tracking_link'],\r\n                tone: 'helpful',\r\n                isActive: true,\r\n                usageCount: 0,\r\n                successRate: 0,\r\n                lastUsed: new Date()\r\n            },\r\n            {\r\n                id: 'vip-greeting',\r\n                name: 'VIP Customer Greeting',\r\n                category: 'VIP',\r\n                intent: ['hype', 'general'],\r\n                platforms: ['instagram', 'whatsapp'],\r\n                template: 'Hey {name}! ðŸ‘‘ VIP access granted. What can we help you with today?',\r\n                variables: ['name'],\r\n                tone: 'excited',\r\n                isActive: true,\r\n                usageCount: 0,\r\n                successRate: 0,\r\n                lastUsed: new Date()\r\n            },\r\n            {\r\n                id: 'drop-hype',\r\n                name: 'Drop Hype Response',\r\n                category: 'Marketing',\r\n                intent: ['hype', 'drop_inquiry'],\r\n                platforms: ['instagram', 'whatsapp'],\r\n                template: 'ðŸ”¥ {name}, you know what\\'s coming! Next drop: {drop_date}. Set your alarms!',\r\n                variables: ['name', 'drop_date'],\r\n                tone: 'excited',\r\n                isActive: true,\r\n                usageCount: 0,\r\n                successRate: 0,\r\n                lastUsed: new Date()\r\n            },\r\n            {\r\n                id: 'support-escalation',\r\n                name: 'Support Escalation',\r\n                category: 'Support',\r\n                intent: ['complaint', 'support'],\r\n                platforms: ['instagram', 'whatsapp', 'email'],\r\n                template: 'I understand your concern, {name}. Let me connect you with our support team right away. They\\'ll reach out within 10 minutes.',\r\n                variables: ['name'],\r\n                tone: 'professional',\r\n                isActive: true,\r\n                usageCount: 0,\r\n                successRate: 0,\r\n                lastUsed: new Date()\r\n            },\r\n            {\r\n                id: 'order-tracking',\r\n                name: 'Order Tracking',\r\n                category: 'Orders',\r\n                intent: ['order_tracking', 'request'],\r\n                platforms: ['instagram', 'whatsapp', 'email'],\r\n                template: 'Hi {name}! Your order #{order_number} is {status}. Track it here: {tracking_link}',\r\n                variables: ['name', 'order_number', 'status', 'tracking_link'],\r\n                tone: 'helpful',\r\n                isActive: true,\r\n                usageCount: 0,\r\n                successRate: 0,\r\n                lastUsed: new Date()\r\n            }\r\n        ]\r\n    }\r\n\r\n    // AutoReply-AI-Start: Load platform configurations\r\n    private loadPlatformConfigs() {\r\n        this.platformConfigs = [\r\n            {\r\n                platform: 'instagram',\r\n                apiKey: process.env.INSTAGRAM_API_KEY || '',\r\n                responseDelay: 3000,\r\n                typingIndicator: true,\r\n                maxResponseLength: 1000,\r\n                supportedFeatures: ['dm', 'comments', 'stories']\r\n            },\r\n            {\r\n                platform: 'whatsapp',\r\n                apiKey: process.env.WHATSAPP_API_KEY || '',\r\n                responseDelay: 2000,\r\n                typingIndicator: true,\r\n                maxResponseLength: 1000,\r\n                supportedFeatures: ['messages', 'status']\r\n            },\r\n            {\r\n                platform: 'email',\r\n                apiKey: process.env.EMAIL_API_KEY || '',\r\n                responseDelay: 5000,\r\n                typingIndicator: false,\r\n                maxResponseLength: 2000,\r\n                supportedFeatures: ['inbox', 'outbox']\r\n            }\r\n        ]\r\n    }\r\n\r\n    // AutoReply-AI-Start: Process incoming message and generate response\r\n    async processMessage(\r\n        message: string,\r\n        senderId: string,\r\n        platform: string,\r\n        senderContext?: SenderContext\r\n    ): Promise<AutoReplyResponse> {\r\n        const startTime = Date.now()\r\n\r\n        // Detect message intent using AI\r\n        const intent = await this.detectIntent(message, senderContext)\r\n\r\n        // Get or generate sender context\r\n        const context = senderContext || await this.getSenderContext(senderId, platform)\r\n\r\n        // Find best template or generate new response\r\n        const response = await this.generateResponse(message, intent, context, platform)\r\n\r\n        // Apply response delay for human-like behavior\r\n        await this.applyResponseDelay(platform)\r\n\r\n        // Send response through platform API\r\n        const sent = await this.sendResponse(response, senderId, platform)\r\n\r\n        const responseTime = Date.now() - startTime\r\n\r\n        // Log the response\r\n        const autoReplyResponse: AutoReplyResponse = {\r\n            id: `reply_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            originalMessageId: `msg_${Date.now()}`,\r\n            senderId,\r\n            platform,\r\n            intent,\r\n            response: sent ? response : 'Failed to send',\r\n            templateUsed: intent.suggestedResponse,\r\n            wasEdited: false,\r\n            wasApproved: false,\r\n            responseTime,\r\n            sentAt: new Date(),\r\n            tags: intent.tags,\r\n            escalationTriggered: intent.requiresHumanEscalation\r\n        }\r\n\r\n        await this.logResponse(autoReplyResponse)\r\n\r\n        return autoReplyResponse\r\n    }\r\n\r\n    // AutoReply-AI-Start: AI-powered intent detection\r\n    async detectIntent(message: string, context?: SenderContext): Promise<MessageIntent> {\r\n        // Mock AI intent detection - in production, this would use OpenAI GPT-4o\r\n        const lowerMessage = message.toLowerCase()\r\n\r\n        let intent: MessageIntent = {\r\n            type: 'general',\r\n            confidence: 0.7,\r\n            urgency: 'low',\r\n            emotionalTone: 'neutral',\r\n            requiresHumanEscalation: false,\r\n            suggestedResponse: '',\r\n            tags: []\r\n        }\r\n\r\n        // Intent detection logic\r\n        if (lowerMessage.includes('ship') || lowerMessage.includes('delivery') || lowerMessage.includes('when')) {\r\n            intent.type = 'question'\r\n            intent.tags.push('shipping')\r\n            intent.suggestedResponse = 'faq-shipping'\r\n        } else if (lowerMessage.includes('order') || lowerMessage.includes('track')) {\r\n            intent.type = 'order_tracking'\r\n            intent.tags.push('order')\r\n            intent.suggestedResponse = 'order-tracking'\r\n        } else if (lowerMessage.includes('drop') || lowerMessage.includes('release') || lowerMessage.includes('ðŸ”¥')) {\r\n            intent.type = 'drop_inquiry'\r\n            intent.tags.push('drop', 'marketing')\r\n            intent.suggestedResponse = 'drop-hype'\r\n        } else if (lowerMessage.includes('problem') || lowerMessage.includes('issue') || lowerMessage.includes('wrong')) {\r\n            intent.type = 'complaint'\r\n            intent.urgency = 'high'\r\n            intent.emotionalTone = 'negative'\r\n            intent.requiresHumanEscalation = true\r\n            intent.tags.push('support', 'escalation')\r\n            intent.suggestedResponse = 'support-escalation'\r\n        } else if (lowerMessage.includes('love') || lowerMessage.includes('ðŸ”¥') || lowerMessage.includes('amazing')) {\r\n            intent.type = 'hype'\r\n            intent.emotionalTone = 'positive'\r\n            intent.tags.push('engagement')\r\n            intent.suggestedResponse = context?.isVIP ? 'vip-greeting' : 'drop-hype'\r\n        }\r\n\r\n        // Adjust based on sender context\r\n        if (context?.isVIP) {\r\n            intent.confidence += 0.1\r\n            intent.tags.push('vip')\r\n        }\r\n\r\n        if (context?.hasOrderedRecently) {\r\n            intent.tags.push('returning_customer')\r\n        }\r\n\r\n        return intent\r\n    }\r\n\r\n    // AutoReply-AI-Start: Get or create sender context\r\n    async getSenderContext(senderId: string, platform: string): Promise<SenderContext> {\r\n        // Mock sender context - in production, this would query the database\r\n        return {\r\n            id: senderId,\r\n            platform: platform as any,\r\n            isVIP: Math.random() > 0.8, // 20% chance of being VIP\r\n            isFirstTime: Math.random() > 0.7,\r\n            hasOrderedRecently: Math.random() > 0.6,\r\n            hasCommentedBefore: Math.random() > 0.5,\r\n            lastInteractionDate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\r\n            totalInteractions: Math.floor(Math.random() * 20) + 1,\r\n            averageResponseTime: Math.floor(Math.random() * 5000) + 1000,\r\n            preferredLanguage: 'en',\r\n            timezone: 'Africa/Cairo',\r\n            customerSegment: Math.random() > 0.8 ? 'vip' : Math.random() > 0.6 ? 'hot' : Math.random() > 0.4 ? 'warm' : 'cold'\r\n        }\r\n    }\r\n\r\n    // AutoReply-AI-Start: Generate appropriate response\r\n    async generateResponse(\r\n        message: string,\r\n        intent: MessageIntent,\r\n        context: SenderContext,\r\n        platform: string\r\n    ): Promise<string> {\r\n        let response = ''\r\n\r\n        // Try to use suggested template\r\n        if (intent.suggestedResponse) {\r\n            const template = this.templates.find(t => t.id === intent.suggestedResponse)\r\n            if (template && template.isActive) {\r\n                response = this.fillTemplate(template, context, message)\r\n            }\r\n        }\r\n\r\n        // If no template found, generate new response\r\n        if (!response) {\r\n            response = await this.generateNewResponse(message, intent, context, platform)\r\n        }\r\n\r\n        // Apply tone adaptation\r\n        response = this.adaptTone(response, intent.emotionalTone, context)\r\n\r\n        // Truncate if too long for platform\r\n        const config = this.platformConfigs.find(c => c.platform === platform)\r\n        if (config && response.length > config.maxResponseLength) {\r\n            response = response.substring(0, config.maxResponseLength - 3) + '...'\r\n        }\r\n\r\n        return response\r\n    }\r\n\r\n    // AutoReply-AI-Start: Fill template with variables\r\n    private fillTemplate(template: AutoReplyTemplate, context: SenderContext, message: string): string {\r\n        let response = template.template\r\n\r\n        // Replace variables\r\n        if (template.variables.includes('name')) {\r\n            response = response.replace('{name}', context.id.split('_')[0] || 'there')\r\n        }\r\n        if (template.variables.includes('tracking_link')) {\r\n            response = response.replace('{tracking_link}', 'https://track.essentials-egypt.com')\r\n        }\r\n        if (template.variables.includes('drop_date')) {\r\n            response = response.replace('{drop_date}', 'Friday 3 PM Cairo Time')\r\n        }\r\n        if (template.variables.includes('order_number')) {\r\n            response = response.replace('{order_number}', '#' + Math.floor(Math.random() * 10000))\r\n        }\r\n        if (template.variables.includes('status')) {\r\n            response = response.replace('{status}', 'in transit')\r\n        }\r\n\r\n        return response\r\n    }\r\n\r\n    // AutoReply-AI-Start: Generate new response using AI\r\n    async generateNewResponse(\r\n        message: string,\r\n        intent: MessageIntent,\r\n        context: SenderContext,\r\n        platform: string\r\n    ): Promise<string> {\r\n        // Mock AI response generation - in production, this would use OpenAI\r\n        const responses = {\r\n            question: 'Thanks for asking! Let me help you with that.',\r\n            complaint: 'I understand your concern. Let me get this sorted for you.',\r\n            hype: 'ðŸ”¥ Love the energy! Thanks for the support!',\r\n            confusion: 'No worries, let me clarify that for you.',\r\n            request: 'I\\'ll help you with that right away.',\r\n            order_tracking: 'Let me check your order status for you.',\r\n            product_info: 'Here\\'s what you need to know about that product.',\r\n            support: 'I\\'m here to help! Let me assist you with that.',\r\n            drop_inquiry: 'ðŸ”¥ New drops coming soon! Stay tuned!',\r\n            general: 'Thanks for reaching out! How can I help you today?'\r\n        }\r\n\r\n        return responses[intent.type] || responses.general\r\n    }\r\n\r\n    // AutoReply-AI-Start: Adapt tone based on context\r\n    private adaptTone(response: string, emotionalTone: string, context: SenderContext): string {\r\n        if (context.isVIP) {\r\n            response = 'ðŸ‘‘ ' + response\r\n        }\r\n\r\n        switch (emotionalTone) {\r\n            case 'positive':\r\n                response += ' ðŸ˜Š'\r\n                break\r\n            case 'excited':\r\n                response += ' ðŸ”¥'\r\n                break\r\n            case 'negative':\r\n                response = 'I understand your concern. ' + response\r\n                break\r\n            case 'frustrated':\r\n                response = 'I\\'m sorry to hear that. ' + response\r\n                break\r\n        }\r\n\r\n        return response\r\n    }\r\n\r\n    // AutoReply-AI-Start: Apply human-like response delay\r\n    private async applyResponseDelay(platform: string): Promise<void> {\r\n        const config = this.platformConfigs.find(c => c.platform === platform)\r\n        const delay = config?.responseDelay || 3000\r\n\r\n        // Add some randomness to make it more human-like\r\n        const randomDelay = delay + (Math.random() - 0.5) * 2000\r\n\r\n        await new Promise(resolve => setTimeout(resolve, randomDelay))\r\n    }\r\n\r\n    // AutoReply-AI-Start: Send response through platform API\r\n    async sendResponse(response: string, senderId: string, platform: string): Promise<boolean> {\r\n        // Mock API call - in production, this would use actual platform APIs\r\n        console.log(`Sending response to ${senderId} on ${platform}: ${response}`)\r\n\r\n        // Simulate API call delay\r\n        await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n        // Simulate success (90% success rate)\r\n        return Math.random() > 0.1\r\n    }\r\n\r\n    // AutoReply-AI-Start: Log response for analytics\r\n    async logResponse(response: AutoReplyResponse): Promise<void> {\r\n        // Mock logging - in production, this would save to database\r\n        console.log('Auto Reply Logged:', {\r\n            id: response.id,\r\n            platform: response.platform,\r\n            intent: response.intent.type,\r\n            responseTime: response.responseTime,\r\n            tags: response.tags\r\n        })\r\n    }\r\n\r\n    // AutoReply-AI-Start: Get analytics\r\n    async getAnalytics(): Promise<AutoReplyAnalytics> {\r\n        // Mock analytics - in production, this would aggregate from database\r\n        return {\r\n            totalResponses: 1247,\r\n            averageResponseTime: 3200,\r\n            successRate: 0.94,\r\n            escalationRate: 0.12,\r\n            platformBreakdown: {\r\n                instagram: 45,\r\n                whatsapp: 35,\r\n                email: 20\r\n            },\r\n            intentBreakdown: {\r\n                question: 30,\r\n                complaint: 15,\r\n                hype: 25,\r\n                order_tracking: 20,\r\n                general: 10\r\n            },\r\n            topTemplates: this.templates.slice(0, 5),\r\n            recentResponses: []\r\n        }\r\n    }\r\n\r\n    // AutoReply-AI-Start: Add new template\r\n    async addTemplate(template: Omit<AutoReplyTemplate, 'id' | 'usageCount' | 'successRate' | 'lastUsed'>): Promise<AutoReplyTemplate> {\r\n        const newTemplate: AutoReplyTemplate = {\r\n            ...template,\r\n            id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            usageCount: 0,\r\n            successRate: 0,\r\n            lastUsed: new Date()\r\n        }\r\n\r\n        this.templates.push(newTemplate)\r\n        return newTemplate\r\n    }\r\n\r\n    // AutoReply-AI-Start: Update template\r\n    async updateTemplate(id: string, updates: Partial<AutoReplyTemplate>): Promise<AutoReplyTemplate | null> {\r\n        const index = this.templates.findIndex(t => t.id === id)\r\n        if (index === -1) return null\r\n\r\n        this.templates[index] = { ...this.templates[index], ...updates }\r\n        return this.templates[index]\r\n    }\r\n\r\n    // AutoReply-AI-Start: Toggle auto reply system\r\n    async toggleSystem(active: boolean): Promise<void> {\r\n        this.isActive = active\r\n    }\r\n\r\n    // AutoReply-AI-Start: Check if system is active\r\n    isSystemActive(): boolean {\r\n        return this.isActive\r\n    }\r\n\r\n    // AutoReply-AI-Start: Get all templates\r\n    async getTemplates(): Promise<AutoReplyTemplate[]> {\r\n        return this.templates\r\n    }\r\n\r\n    // AutoReply-AI-Start: Get platform configs\r\n    async getPlatformConfigs(): Promise<PlatformConfig[]> {\r\n        return this.platformConfigs\r\n    }\r\n}\r\n\r\nexport const aiAutoRepliesService = new AIAutoRepliesService() "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/pages/api/auto-replies/analytics.ts"],"sourcesContent":["// AutoReply-AI-Start: API endpoint for auto reply analytics\r\nimport { NextApiRequest, NextApiResponse } from 'next'\r\nimport { aiAutoRepliesService } from '@/services/ai-auto-replies'\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n    if (req.method !== 'GET') {\r\n        return res.status(405).json({ error: 'Method not allowed' })\r\n    }\r\n\r\n    try {\r\n        const analytics = await aiAutoRepliesService.getAnalytics()\r\n        const platformConfigs = await aiAutoRepliesService.getPlatformConfigs()\r\n        const isActive = aiAutoRepliesService.isSystemActive()\r\n\r\n        return res.status(200).json({\r\n            success: true,\r\n            analytics,\r\n            platformConfigs,\r\n            systemStatus: {\r\n                isActive,\r\n                lastUpdated: new Date().toISOString()\r\n            }\r\n        })\r\n\r\n    } catch (error) {\r\n        console.error('Analytics retrieval error:', error)\r\n        return res.status(500).json({\r\n            error: 'Failed to retrieve analytics',\r\n            details: error instanceof Error ? error.message : 'Unknown error'\r\n        })\r\n    }\r\n} "],"names":[],"mappings":"AAAA,4DAA4D;;;;AAE5D;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC3E,IAAI,IAAI,MAAM,KAAK,OAAO;QACtB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC9D;IAEA,IAAI;QACA,MAAM,YAAY,MAAM,iIAAA,CAAA,uBAAoB,CAAC,YAAY;QACzD,MAAM,kBAAkB,MAAM,iIAAA,CAAA,uBAAoB,CAAC,kBAAkB;QACrE,MAAM,WAAW,iIAAA,CAAA,uBAAoB,CAAC,cAAc;QAEpD,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACxB,SAAS;YACT;YACA;YACA,cAAc;gBACV;gBACA,aAAa,IAAI,OAAO,WAAW;YACvC;QACJ;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACxB,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACtD;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.dev.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n    }\n  } else {\n    if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1C,IAAIN,QAAQC,GAAG,CAACM,SAAS,eAAE;YACzBJ,OAAOC,OAAO,GAAGC,QAAQ;QAC3B,OAAO;;QAEP;IACF,OAAO;;IAMP;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 528, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 557, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":["file:///D:/hamzaa/SocialMedia/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;yMAGzBD,QAAAA,EAAMC,uIAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,uIAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0],"debugId":null}}]
}